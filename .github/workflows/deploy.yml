name: Deploy CodeGuard AI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          codeGuardAI/backend/package-lock.json
          codeGuardAI/frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd codeGuardAI/backend
        npm ci
    
    - name: Install frontend dependencies
      run: |
        cd codeGuardAI/frontend
        npm ci
    
    - name: Run backend linting
      run: |
        cd codeGuardAI/backend
        npm run lint
    
    - name: Run frontend linting
      run: |
        cd codeGuardAI/frontend
        npm run lint
    
    - name: Run backend tests
      run: |
        cd codeGuardAI/backend
        npm test
    
    - name: Build frontend
      run: |
        cd codeGuardAI/frontend
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./codeGuardAI/backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/codeguard-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/codeguard-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./codeGuardAI/frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/codeguard-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/codeguard-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # For example, deploy to a staging server or cloud service

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # For example:
        # - Deploy to cloud provider
        # - Update container registry
        # - Run database migrations
        # - Update DNS records



